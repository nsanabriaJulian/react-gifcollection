{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAAEC,GACnBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCLnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGlC,OACI,sBAAKc,UAAU,+CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECFwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAGPH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMlB,CAACpB,IAGGqB,EDtByBK,CAAc1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEgBvBgB,EA/BM,SAAAC,GAEjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACI,qCACG,gEACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCnB9B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1c10f940.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue (e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue('');   \r\n        }\r\n         \r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=iI7UrAiJg6vFGSw1khOGlhy5sKh6tJAr`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json ();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__jackInTheBox\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n ","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const { data:images, loading} = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__rollIn\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img  => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// NOTA: useEffect me permite ejecutar cierto código de manera condicional\r\n// (en éste caso hago que se ejecute 1 sola vez) \r\n// -> [] arreglo de dependencias, si mandamos los corchetes vacios el useEffect sólo se ejecutará 1 sola vez\r\n// \r\n//  useEffect( () => {\r\n//      getGifs();       ---> Hago que se ejecute solo cuando renderiza por primera vez.\r\n//  }, [])\r\n\r\n// useFetchGifs --> custom hook","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category ) //--> petición HTTP\r\n            .then( imgs => {\r\n\r\n\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n\r\n                \r\n            })\r\n\r\n    }, [category]) // -->hace el efecto solo cuando cambia la categoria\r\n\r\n\r\n    return state; // ---> data: [], loading: true ( <-- devuelve eso )\r\n\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     //setCategories( [...categories, 'HunterXHunter'] );\r\n    //     setCategories( cats => [ ...cats, 'HunterXHunter'] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n           <h2>Gif Collection - Busca tu Gif!</h2>\r\n           <AddCategory setCategories={ setCategories } />\r\n           <hr /> \r\n           \r\n           {/* <button onClick = { handleAdd }> Agregar </button> */}\r\n\r\n           <ol>\r\n               {\r\n                   categories.map( category => (\r\n                        <GifGrid \r\n                        key={ category }\r\n                        category={ category } />\r\n                   ))\r\n                        \r\n               }\r\n           </ol>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n// GifExpertApp\n// <h2>GifExpertApp</h2>\n// <hr />"],"sourceRoot":""}